##
# Ansible playbook setting up developer tools used in building Training Wheels
#

---
- hosts: all
  gather_facts: False

  tasks:
    ##
    # Apt package installation of required software.
    #
    - name: Install required packages.
      action: apt pkg=$item state=installed
      with_items:
        - php5
        - mysql-server
        - mysql-client
        - php5-mysql
        - php-apc
        - php5-xmlrpc
        - php-soap
        - php5-gd
        - php-pear
        - sendmail
        - vsftpd
        - unzip
        - python-mysqldb
        - rubygems
        - tomcat6
        - tomcat6-admin
        - tomcat6-common
        - tomcat6-user
        - tomcat6-docs
        - tomcat6-examples

    - name: Install Aurora
      action: command gem install compass-aurora creates=/var/lib/gems/1.8/specifications/compass-aurora-1.1.1.gemspec

    - name: Install Animation
      action: command gem install animation --pre creates=/var/lib/gems/1.8/specifications/animation-0.1.alpha.3.gemspec

    ##
    # PHP Setup.
    #
    - name: PHP configuration file php.ini
      action: template src=templates/etc-php5-apache2-php-ini.j2 dest=/etc/php5/apache2/php.ini

    - name: APC cache configuration file apc.ini
      action: template src=templates/etc-php5-conf-d-apc-ini.j2 dest=/etc/php5/conf.d/apc.ini

    ##
    # MySQL database setup.
    #
    - name: MySQL configuration file my.cnf
      action: template src=templates/etc-mysql-my-cnf.j2 dest=/etc/mysql/my.cnf

    - name: Remove the MySQL test database
      action: mysql_db db=test state=absent

    ##
    # Setup a user for nginx
    #
    - name: Create nginx group
      action: group name=nginx system=yes

    - name: Create a user for nginx otherwise www-data is shared with Apache
      action: user name=nginx group=nginx createhome=no system=yes

    ##
    # Setup a user for php-fpm
    #
    - name: Create phpfpm group
      action: group name=phpfpm system=yes

    - name: Create a user for phpfpm
      action: user name=phpfpm group=phpfpm createhome=yes home=$phpfpmhome system=yes shell=/bin/false

    - name: Create phpfpm home
      action: file path=$phpfpmhome state=directory owner=phpfpm group=phpfpm mode=700

    - name: Private tmp directory for php-fpm needed by Training Wheels
      action: file path=$phpfpmhome/tmp state=directory owner=phpfpm group=phpfpm mode=700

    - name: Copy MySQL config from root so phpfpm can easily administer the database
      action: shell cp /root/.my.cnf $phpfpmhome/.my.cnf creates=$phpfpmhome/.my.cnf

    - name: Check permissions of MySQL config
      action: file path=$phpfpmhome/.my.cnf owner=phpfpm group=phpfpm mode=600

    ##
    # Apt package installation of required software.
    #
    - name: Install required packages.
      action: apt pkg=$item state=installed
      with_items:
        - nginx
        - php5-fpm
        - php5-intl
        - unzip
        - curl

    ##
    # Configuration for php-fpm
    #
    - name: Configure php-fpm
      action: template src=templates/etc-php5-fpm-pool-d-www-conf.j2 dest=/etc/php5/fpm/pool.d/www.conf

    - name: PHP configuration file php.ini for php-fpm
      action: template src=templates/etc-php5-fpm-php-ini.j2 dest=/etc/php5/fpm/php.ini

    - name: Sudoers file allowing the phpfpm user to administer the server
      action: copy src=files/etc-sudoers-d-phpfpm dest=/etc/sudoers.d/phpfpm mode=0440

    ##
    # Configuration for MongoDB database
    #
    - name: Install the PECL MongoDB extension
      action: command pecl install mongo creates=/usr/lib/php5/20090626/mongo.so

    - name: Configure PHP to use PECL MongoDB extension
      action: copy dest=/etc/php5/conf.d/mongo.ini src=files/etc-php5-conf-d-mongo-ini

    ##
    # Configuration for nginx
    #
    - name: Add mime types for nginx including our font type WOFF
      action: copy src=files/etc-nginx-mime-types dest=/etc/nginx/mime.types

    - name: Configure nginx
      action: template src=templates/etc-nginx-nginx-conf.j2 dest=/etc/nginx/nginx.conf

    - name: Remove default site
      action: file path=/etc/nginx/sites-enabled/default state=absent

    ##
    # Apache solr
    #
    - name: Solr | Copy war
      action: copy src=files/spache-solr-3.6.2/dist/apache-solr-3.6.2.war dest=/usr/share/tomcate6/webapps/solr.war

    - name: Solr | Copy example
      action: copy src=files/apache-solr-3.6.2/example/solr dest=/usr/share/tomcate6/solr/

    - name: Solr | Copy config
      action: copy src=files/etc-tomcat6-catalina-localhost-solr.xml dest=/etc/tomcat6/Catalina/localhost/solr.xml

    - name: Solr | Copy multicore config
      action: copy src=files/apache-solr-3.6.2/example/multicore/solr.xml dest=/usr/share/tomcat6/solr/solr.xml

    - name: Solr | Restart tomcat
      action: service name=tomcat6 state=restarted

    ##
    # Misc fixes
    #
    - name: Prevent the stdin is not a tty error from appearing in Vagrant
      action: copy src=root-profile dest=/root/.profile owner=root group=root mode=644
