##
# Ansible playbook setting up developer tools used in building local dev environment
#

---
- hosts: all
  gather_facts: False

  vars:
    phpfpmhome: '/home/phpfpm'
    vagrant_home: '/home/vagrant'

  vars_files:
    - settings.yml

  tasks:
    ##
    # Apt package installation of required software.
    #
    - name: Install required packages.
      action: apt pkg=$item state=installed
      with_items:
        - php5
        - mysql-server
        - mysql-client
        - php5-mysql
        - php-apc
        - php5-xmlrpc
        - php5-xdebug
        - php-soap
        - php5-gd
        - php-pear
        - php5-curl
        - sendmail
        - vsftpd
        - unzip
        - python-mysqldb
        - rubygems
        - tomcat6
        - tomcat6-admin
        - tomcat6-common
        - tomcat6-user
        - tomcat6-docs
        - tomcat6-examples
        - varnish
        - vim-nox
        - vim-scripts
        - vim-common
        - unzip
        - curl
        - htop
        - redis-server

    - name: Remove unused packages
      action: apt pkg=$item purge=yes state=absent
      with_items:
        - apache2-mpm-prefork
        - apache2-utils
        - apache2.2-bin
        - apache2.2-common
        - libapache2-mod-php5

    #- name: Install Aurora
    #  action: command gem install compass-aurora

    #- name: Install Susy
    #  action: command gem install susy

    #- name: Install Animation
    #  action: command gem install animation --pre

    #- name: Install RGBA PNG
    #  action: command gem install compass-rgbapng

    ##
    # PHP Setup.
    #
    - name: APC cache configuration file apc.ini
      action: template src=templates/etc-php5-conf-d-apc-ini.j2 dest=/etc/php5/conf.d/apc.ini

    ##
    # MySQL database setup.
    #
    - name: MySQL configuration file my.cnf
      action: template src=templates/etc-mysql-my-cnf.j2 dest=/etc/mysql/my.cnf

    - name: Remove the MySQL test database
      action: mysql_db db=test state=absent

    ##
    # Setup a user for nginx
    #
    - name: Create nginx group
      action: group name=nginx system=yes

    - name: Create a user for nginx otherwise www-data is shared with Apache
      action: user name=nginx group=nginx createhome=no system=yes

    ##
    # Setup a user for php-fpm
    #
    - name: Create phpfpm group
      action: group name=phpfpm system=yes

    - name: Create a user for phpfpm
      action: user name=phpfpm group=phpfpm createhome=yes home=$phpfpmhome system=yes shell=/bin/false

    - name: Create phpfpm home
      action: file path=$phpfpmhome state=directory owner=phpfpm group=phpfpm mode=700

    ##
    # Apt package installation of required software.
    #
    - name: Install required packages.
      action: apt pkg=$item state=installed
      with_items:
        - nginx
        - php5-fpm
        - php5-intl

    ##
    # Configuration for php-fpm
    #
    - name: Configure php-fpm
      action: template src=templates/etc-php5-fpm-pool-d-www-conf.j2 dest=/etc/php5/fpm/pool.d/www.conf

    - name: PHP configuration file php.ini for php-fpm
      action: template src=templates/etc-php5-fpm-php-ini.j2 dest=/etc/php5/fpm/php.ini

    - name: XDebug Config
      action: copy dest=/etc/php5/conf.d/xdebug.ini src=files/etc-php5-conf-d-xdebug-ini

    - name: Sudoers file allowing the phpfpm user to administer the server
      action: copy src=files/etc-sudoers-d-phpfpm dest=/etc/sudoers.d/phpfpm mode=0440

    - name: Restart PHP-fpm
      action: service name=php5-fpm state=restarted

    ##
    # Configuration for MongoDB database
    #
    - name: Install the PECL MongoDB extension
      action: command pecl install mongo creates=/usr/lib/php5/20090626/mongo.so

    - name: Configure PHP to use PECL MongoDB extension
      action: copy dest=/etc/php5/conf.d/mongo.ini src=files/etc-php5-conf-d-mongo-ini

    ##
    # Configuration for varnish
    #
    - name: Copy varnish default.vcl
      action: copy src=files/etc-varnish-default.vcl dest=/etc/varnish/default.vcl

    - name: Copy varnish config
      action: copy src=files/etc-default-varnish dest=/etc/default/varnish

    - name: Restart varnish
      action: service name=varnish state=restarted

    ##
    # Configuration for nginx
    #
    - name: Add mime types for nginx including our font type WOFF
      action: copy src=files/etc-nginx-mime-types dest=/etc/nginx/mime.types

    - name: Configure nginx
      action: template src=templates/etc-nginx-nginx-conf.j2 dest=/etc/nginx/nginx.conf

    - name: Update default site
      action: template src=templates/etc-nginx-sites-available-default.j2 dest=/etc/nginx/sites-available/default

    - name: Enable default site
      action: file path=/etc/nginx/sites-enabled/default src=/etc/nginx/sites-available/default state=link

    - name: Copy self-signed cert
      action: copy src=files/etc-ssl-certs-ssl.crt dest=/etc/ssl/certs/ssl.crt

    - name: Copy self-signed key
      action: copy src=files/etc-ssl-private-ssl.key dest=/etc/ssl/private/ssl.key

    - name: Update default ssl site
      action: template src=templates/etc-nginx-sites-available-default-ssl.j2 dest=/etc/nginx/sites-available/default-ssl

    - name: Enable default ssl site
      action: file path=/etc/nginx/sites-enabled/default-ssl src=/etc/nginx/sites-available/default-ssl state=link

    - name: Restart nginx
      action: service name=nginx state=restarted

    ##
    # Apache solr
    #
    - name: Solr | Create webapps directory
      action: file path=/usr/share/tomcat6/webapps state=directory owner=tomcat6 group=tomcat6 mode=700

    - name: Solr | Copy war
      action: copy src=files/usr-share-tomcat6-webapps-solr.war dest=/usr/share/tomcat6/webapps/solr.war

    - name: Solr | Copy solr directory
      action: copy src=files/solr.tgz dest=/usr/share/tomcat6/

    - name: Solr | Expand solr directory
      action: shell cd /usr/share/tomcat6/ && tar -xzf ./solr.tgz

    - name: Solr | Copy config
      action: copy src=files/etc-tomcat6-catalina-localhost-solr.xml dest=/etc/tomcat6/Catalina/localhost/solr.xml

    - name: Solr | Copy multicore config
      action: copy src=files/usr-share-tomcat6-solr-solr.xml dest=/usr/share/tomcat6/solr/solr.xml

    - name: Solr | Restart tomcat
      action: service name=tomcat6 state=restarted

    ##
    # MongoDB install.
    #
    - name: MongoDB | Add the key
      action: command apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10

    - name: MongoDB | Add the MongoDB repo
      action: copy src=files/etc-apt-sources-list-d-mongodb-list dest=/etc/apt/sources.list.d/mongodb.list

    - name: MongoDB | Update the apt cache for the new repository
      action: apt update-cache=yes

    - name: MongoDB | Install Mongo
      action: apt pkg=$item state=installed
      with_items:
        - mongodb-10gen

    - name: MongoDB | Restart Mongo
      action: service name=mongodb state=restarted

    ##
    # Node.js install.
    #
    - name: Node.js | Package prerequisites for node.js
      action: apt pkg=python-software-properties state=installed

    - name: Node.js | Add the node.js PPA
      action: command add-apt-repository -y ppa:chris-lea/node.js creates=/etc/apt/sources.list.d/chris-lea-node_js-precise.list

    - name: Node.js | Update the apt cache for the new repository
      action: apt update-cache=yes

    - name: Node.js | Install nodejs and npm
      action: apt pkg=$item state=installed
      with_items:
        - nodejs

    ##
    # Git config
    #
    - name: Copy gitconfig
      action: template src=templates/home-vagrant-.gitconfig.j2 dest=/home/vagrant/.gitconfig

    ##
    # Drush install, a Drupal shell tool.
    #
    - name: Setup PEAR channel for drush
      action: command pear channel-discover pear.drush.org creates=/usr/share/php/.channels/pear.drush.org.reg

    - name: Install drush for Drupal
      action: command pear install drush/drush creates=/usr/bin/drush

    - name: Create local drush file
      action: file path=${vagrant_home}/.drush state=directory mode=755 owner=vagrant

    - name: Copy drush aliases
      action: copy src=$item dest=${vagrant_home}/.drush/ owner=vagrant
      with_fileglob: files/drush/*.php

    ##
    # Misc fixes
    #
    - name: Prevent the stdin is not a tty error from appearing in Vagrant
      action: copy src=root-profile dest=/root/.profile owner=root group=root mode=644
